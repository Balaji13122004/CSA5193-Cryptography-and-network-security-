#include <stdio.h>

// Extended Euclidean Algorithm
int gcdExtended(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = gcdExtended(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

int main() {
    int e = 31, n = 3599;
    int p = 59, q = 61;  // From trial-and-error, n = p * q
    int phi = (p - 1) * (q - 1);
    int d, x, y;

    // Find d (multiplicative inverse of e modulo phi)
    gcdExtended(e, phi, &x, &y);
    d = (x % phi + phi) % phi;

    printf("Public Key: (e=%d, n=%d)\n", e, n);
    printf("Private Key: (d=%d, n=%d)\n", d, n);

    return 0;
}
