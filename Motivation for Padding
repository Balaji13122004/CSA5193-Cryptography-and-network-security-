#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8  // Block size in bytes
#define PADDING_CHAR 0x80  // Padding starts with 1 followed by 0 bits

// Function to add padding
void addPadding(unsigned char *plaintext, int *len) {
    int padLength = BLOCK_SIZE - (*len % BLOCK_SIZE);
    for (int i = 0; i < padLength; i++) {
        plaintext[*len + i] = (i == 0) ? PADDING_CHAR : 0x00;
    }
    *len += padLength;
}

// Dummy encryption function (for demonstration)
void encryptBlock(unsigned char *block, unsigned char *key, unsigned char *output) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = block[i] ^ key[i % BLOCK_SIZE];  // Simple XOR encryption
    }
}

// ECB Mode
void ecbEncrypt(unsigned char *plaintext, int len, unsigned char *key, unsigned char *ciphertext) {
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        encryptBlock(plaintext + i, key, ciphertext + i);
    }
}

// CBC Mode
void cbcEncrypt(unsigned char *plaintext, int len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
    unsigned char temp[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++) {
            temp[j] = plaintext[i + j] ^ iv[j];
        }
        encryptBlock(temp, key, ciphertext + i);
        memcpy(iv, ciphertext + i, BLOCK_SIZE);
    }
}

// CFB Mode
void cfbEncrypt(unsigned char *plaintext, int len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
    unsigned char temp[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        encryptBlock(iv, key, temp);
        for (int j = 0; j < BLOCK_SIZE && i + j < len; j++) {
            ciphertext[i + j] = plaintext[i + j] ^ temp[j];
            iv[j] = ciphertext[i + j];
        }
    }
}

int main() {
    unsigned char plaintext[64] = "This is a test message for encryption modes!";
    unsigned char key[BLOCK_SIZE] = "MyKey123";  // 8-byte key
    unsigned char iv[BLOCK_SIZE] = "InitVect";   // 8-byte initialization vector
    unsigned char ciphertext[64];
    int len = strlen((char *)plaintext);

    printf("Original Plaintext: %s\n", plaintext);

    // Add padding
    addPadding(plaintext, &len);
    printf("Plaintext after Padding: ");
    for (int i = 0; i < len; i++) printf("%02X ", plaintext[i]);
    printf("\n");

    // ECB Encryption
    ecbEncrypt(plaintext, len, key, ciphertext);
    printf("Ciphertext (ECB): ");
    for (int i = 0; i < len; i++) printf("%02X ", ciphertext[i]);
    printf("\n");

    // CBC Encryption
    memcpy(iv, "InitVect", BLOCK_SIZE);  // Reset IV
    cbcEncrypt(plaintext, len, key, iv, ciphertext);
    printf("Ciphertext (CBC): ");
    for (int i = 0; i < len; i++) printf("%02X ", ciphertext[i]);
    printf("\n");

    // CFB Encryption
    memcpy(iv, "InitVect", BLOCK_SIZE);  // Reset IV
    cfbEncrypt(plaintext, len, key, iv, ciphertext);
    printf("Ciphertext (CFB): ");
    for (int i = 0; i < len; i++) printf("%02X ", ciphertext[i]);
    printf("\n");

    return 0;
}
